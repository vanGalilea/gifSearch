{
  "_args": [
    [
      {
        "raw": "postcss-loader@1.0.0",
        "scope": null,
        "escapedName": "postcss-loader",
        "name": "postcss-loader",
        "rawSpec": "1.0.0",
        "spec": "1.0.0",
        "type": "version"
      },
      "/home/ziv/code/treehouse/react/gif-search/node_modules/react-scripts"
    ]
  ],
  "_from": "postcss-loader@1.0.0",
  "_id": "postcss-loader@1.0.0",
  "_inCache": true,
  "_location": "/postcss-loader",
  "_nodeVersion": "6.7.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/postcss-loader-1.0.0.tgz_1476610368533_0.19687212468124926"
  },
  "_npmUser": {
    "name": "ai",
    "email": "andrey@sitnik.ru"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "postcss-loader@1.0.0",
    "scope": null,
    "escapedName": "postcss-loader",
    "name": "postcss-loader",
    "rawSpec": "1.0.0",
    "spec": "1.0.0",
    "type": "version"
  },
  "_requiredBy": [
    "/react-scripts"
  ],
  "_resolved": "https://registry.npmjs.org/postcss-loader/-/postcss-loader-1.0.0.tgz",
  "_shasum": "e3b65d0c8596c1658f79d7db2d291310748d5d2a",
  "_shrinkwrap": null,
  "_spec": "postcss-loader@1.0.0",
  "_where": "/home/ziv/code/treehouse/react/gif-search/node_modules/react-scripts",
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "bugs": {
    "url": "https://github.com/postcss/postcss-loader/issues"
  },
  "dependencies": {
    "loader-utils": "^0.2.16",
    "object-assign": "^4.1.0",
    "postcss": "^5.2.4",
    "postcss-load-config": "^1.0.0-rc"
  },
  "description": "PostCSS loader for webpack",
  "devDependencies": {
    "chai": "3.5.0",
    "eslint-config-postcss": "2.0.2",
    "fs-extra": "0.30.0",
    "gulp": "3.9.1",
    "gulp-eslint": "3.0.1",
    "gulp-mocha": "3.0.1",
    "json-loader": "0.5.4",
    "postcss-js": "0.1.3",
    "postcss-safe-parser": "2.0.0",
    "raw-loader": "0.5.1",
    "sugarss": "0.2.0",
    "webpack-stream": "3.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "e3b65d0c8596c1658f79d7db2d291310748d5d2a",
    "tarball": "https://registry.npmjs.org/postcss-loader/-/postcss-loader-1.0.0.tgz"
  },
  "gitHead": "d6428001be679dc24f7509ca5e6ad55116b86599",
  "homepage": "https://github.com/postcss/postcss-loader#readme",
  "keywords": [
    "webpack",
    "loader",
    "css",
    "postcss",
    "postcss-runner"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "ai",
      "email": "andrey@sitnik.ru"
    }
  ],
  "name": "postcss-loader",
  "optionalDependencies": {},
  "readme": "# PostCSS for Webpack [![Build Status][ci-img]][ci]\n\n<img align=\"right\" width=\"95\" height=\"95\"\n     title=\"Philosopher’s stone, logo of PostCSS\"\n     src=\"http://postcss.github.io/postcss/logo.svg\">\n\n[PostCSS] loader for [webpack] to postprocesses your CSS with [PostCSS plugins].\n\n<a href=\"https://evilmartians.com/?utm_source=postcss\">\n  <img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\"\n       alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\">\n</a>\n\n[PostCSS plugins]: https://github.com/postcss/postcss#plugins\n[PostCSS]:         https://github.com/postcss/postcss\n[webpack]:         http://webpack.github.io/\n[ci-img]:          https://travis-ci.org/postcss/postcss-loader.svg\n[ci]:              https://travis-ci.org/postcss/postcss-loader\n\n## Install\n\n```sh\nnpm install postcss-loader --save-dev\n```\n\n## Usage\n\nYou can configure PostCSS Loader in common PostCSS config or directly\nin Webpack config. Common PostCSS config is recommended way, because\nmany PostCSS tools will be able to share it.\n\n### PostCSS Config\n\nAdd PostCSS Loader to `webpack.config.js`. Put it before `css-loader`\nand `style-loader`. But after `sass-loader`, if you use it.\n\n```js\nmodule.exports = {\n  module: {\n    loaders: [\n      {\n        test:   /\\.css$/,\n        loader: [\n          'style-loader',\n          'css-loader?importLoaders=1',\n          'postcss-loader'\n        ]\n      }\n    ]\n  }\n}\n```\n\nThen create `postcss.config.js`:\n\n```js\nmodule.exports = {\n  plugins: [\n    require('precss'),\n    require('autoprefixer')\n  ]\n}\n```\n\nYou could put different configs in different directories. For example,\nglobal config in `project/postcss.config.js` and override its plugins\nin `project/src/legacy/postcss.config.js`.\n\nYou can read more about common PostCSS config in [postcss-load-config].\n\n[postcss-load-config]: https://github.com/michael-ciniawsky/postcss-load-config\n\n### Webpack 2.x Config\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          'style-loader',\n          {\n            loader: 'css-loader',\n            options: { importLoaders: 1 }\n          },\n          {\n            loader: 'postcss-loader',\n            options: {\n              plugins: function () {\n                return [\n                  require('precss'),\n                  require('autoprefixer')\n                ];\n              }\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n### Webpack 1.x Config\n\n```js\nmodule.exports = {\n  module: {\n    loaders: [\n      {\n        test:   /\\.css$/,\n        loader: [\n          'style-loader',\n          'css-loader?importLoaders=1',\n          'postcss-loader'\n        ]\n      }\n    ]\n  },\n  postcss: function () {\n    return [\n      require('precss'),\n      require('autoprefixer')\n    ];\n  }\n}\n```\n\n## Options\n\n### Syntaxes\n\nPostCSS can transforms styles in any syntax, not only in CSS.\nThere are 3 parameters to control syntax:\n\n* `syntax` accepts module name with `parse` and `stringify` function.\n* `parser` accepts module name with input parser function.\n* `stringifier` accepts module name with output stringifier function.\n\n```js\nmodule.exports = {\n  module: {\n    loaders: [\n      {\n        test:   /\\.sss/,\n        loader: [\n          'style-loader',\n          'css-loader?importLoaders=1',\n          'postcss-loader?parser=sugarss'\n        ]\n      }\n    ]\n  }\n}\n```\n\n### SourceMaps\n\nLoader will use source map settings from previous loader.\n\nYou can set this `sourceMap` parameter to `inline` value to put source maps\ninto CSS annotation comment:\n\n```js\nmodule.exports = {\n  module: {\n    loaders: [\n      {\n        test: '\\/.css',\n        loader: [\n          'style-loader',\n          'css-loader?importLoaders=1',\n          'postcss-loader?sourceMap=inline'\n        ]\n      }\n    ]\n  }\n}\n```\n\n## Examples\n\n### CSS Modules\n\nThis loader [cannot be used] with [CSS Modules] out of the box due\nto the way `css-loader` processes file imports. To make them work properly,\neither add the css-loader’s [`importLoaders`] option\n\n```js\n…\n      {\n        test: /\\.css$/,\n        loader: [\n          'style-loader',\n          'css-loader?modules&importLoaders=1',\n          'postcss-loader'\n        ]\n      }\n…\n```\nor use [postcss-modules] plugin instead of `css-loader`.\n\n\n[`importLoaders`]: https://github.com/webpack/css-loader#importing-and-chained-loaders\n[postcss-modules]: https://github.com/outpunk/postcss-modules\n[cannot be used]: https://github.com/webpack/css-loader/issues/137\n[CSS Modules]: https://github.com/webpack/css-loader#css-modules\n\n### JS Styles\n\nIf you want to process styles written in JavaScript\nyou can use the [postcss-js] parser.\n\n```js\n…\n      {\n        test: /\\.style.js$/,\n        loader: [\n          'style-loader',\n          'css-loader?modules&importLoaders=1',\n          'postcss-loader?parser=postcss-js',\n          'babel'\n        ]\n      }\n…\n```\n\nAs result you will be able to write styles as:\n\n```js\nimport colors from './config/colors'\n\nexport default {\n  '.menu': {\n    color: colors.main,\n    height: 25,\n    '&_link': {\n      color: 'white'\n    }\n  }\n}\n```\n\nIf you use JS styles without `postcss-js` parser, you can add `exec` parameter:\n\n```js\n…\n      {\n        test:   /\\.style.xyz$/,\n        loader: [\n          'style-loader',\n          'css-loader?modules&importLoaders=1',\n          'postcss-loader?parser=custom-parser&exec'\n        ]\n      }\n…\n```\n\n[postcss-js]: https://github.com/postcss/postcss-js\n\n### Webpack Events\n\nWebpack provides webpack plugin developers a convenient way\nto hook into the build pipeline. The postcss-loader makes use\nof this event system to allow building integrated postcss-webpack tools.\n\nSee the [example] implementation.\n\nEvent `postcss-loader-before-processing` is fired before processing and allows\nto add or remove postcss plugins.\n\n[example]: https://github.com/postcss/postcss-loader/blob/master/test/support/webpack-plugins/rewrite.js\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/postcss/postcss-loader.git"
  },
  "scripts": {
    "test": "gulp"
  },
  "version": "1.0.0"
}
